#!/usr/bin/env python3
"""
Pre-build script to generate version.h with firmware version information.

This script runs before firmware compilation and generates include/version.h
with the following information:
- FW_VERSION: Firmware version (from git tag or default)
- PROTO_VERSION: Serial protocol version (hardcoded, bump on protocol changes)
- BUILD_GIT_SHA: Git commit hash (with -dirty suffix if uncommitted changes)
- BUILD_DATE: Build timestamp in ISO 8601 UTC format

HOW TO UPDATE VERSIONS:
- Firmware version: Create git tag (e.g., git tag v0.2.0)
- Protocol version: Edit PROTO_VERSION below (line 35)
"""

import os
import subprocess
from datetime import datetime, timezone

Import("env")

def _git(cmd, default="unknown"):
    """Execute git command and return output, or default if fails."""
    try:
        out = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
        return out.decode("utf-8").strip()
    except Exception:
        return default

def _is_dirty():
    """Check if git working directory has uncommitted changes."""
    try:
        subprocess.check_call("git diff-index --quiet HEAD --", shell=True)
        return False
    except Exception:
        return True


print("=" * 70)
print("PRE-BUILD: Generating version.h...")
print("=" * 70)

proj_dir = env.subst("$PROJECT_DIR")
sha = _git(f"git -C {proj_dir} rev-parse --short=8 HEAD")
dirty = _is_dirty()
date = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")

# ============================================================================
# VERSION CONFIGURATION
# ============================================================================
# PROTOCOL VERSION: Bump this when making incompatible protocol changes
# Examples: "0.1" → "0.2" (minor), "0.1" → "1.0" (major breaking)
PROTO_VERSION = "0.1"

# FIRMWARE VERSION: Automatically detected from git tags
# To update: git tag v0.2.0 && git push --tags
fw_version = _git(f"git -C {proj_dir} describe --tags --abbrev=0", default="0.1.0")
# ============================================================================

if dirty:
    sha = f"{sha}-dirty"

hdr_dir = os.path.join(proj_dir, "include")
os.makedirs(hdr_dir, exist_ok=True)
hdr_path = os.path.join(hdr_dir, "version.h")

content = f"""
#pragma once
// Auto-generated by PlatformIO extra_script (generate_version.py)
// DO NOT EDIT MANUALLY - This file is regenerated on every build
#define FW_VERSION "{fw_version}"
#define PROTO_VERSION "{PROTO_VERSION}"
#define BUILD_GIT_SHA "{sha}"
#define BUILD_DATE "{date}"
""".lstrip()

old = None
if os.path.exists(hdr_path):
    with open(hdr_path, "r", encoding="utf-8") as f:
        old = f.read()

if old != content:
    with open(hdr_path, "w", encoding="utf-8") as f:
        f.write(content)
    print("✅ Version info updated:")
else:
    print("✅ Version info up-to-date:")

# Always print current version info
print(f"   Firmware:  {fw_version}")
print(f"   Protocol:  {PROTO_VERSION}")
print(f"   Git SHA:   {sha}")
print(f"   Build:     {date}")
print(f"   File:      {hdr_path}")
print("=" * 70)

