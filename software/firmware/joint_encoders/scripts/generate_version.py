import os
import subprocess
from datetime import datetime, timezone

Import("env")

def _git(cmd, default="unknown"):
    try:
        out = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
        return out.decode("utf-8").strip()
    except Exception:
        return default

def _is_dirty():
    try:
        subprocess.check_call("git diff-index --quiet HEAD --", shell=True)
        return False
    except Exception:
        return True

proj_dir = env.subst("$PROJECT_DIR")
sha = _git(f"git -C {proj_dir} rev-parse --short=8 HEAD")
dirty = _is_dirty()
date = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")

proto = "0.1"
fw_version = _git(f"git -C {proj_dir} describe --tags --abbrev=0", default="0.1.0")
if dirty:
    sha = f"{sha}-dirty"

hdr_dir = os.path.join(proj_dir, "include")
os.makedirs(hdr_dir, exist_ok=True)
hdr_path = os.path.join(hdr_dir, "version.h")

content = f"""
#pragma once
// Auto-generated by PlatformIO extra_script (generate_version.py)
#define FW_VERSION "{fw_version}"
#define PROTO_VERSION "{proto}"
#define BUILD_GIT_SHA "{sha}"
#define BUILD_DATE "{date}"
""".lstrip()

old = None
if os.path.exists(hdr_path):
    with open(hdr_path, "r", encoding="utf-8") as f:
        old = f.read()

if old != content:
    with open(hdr_path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"[gen-version] Wrote {hdr_path}")
else:
    print(f"[gen-version] Up-to-date {hdr_path}")

